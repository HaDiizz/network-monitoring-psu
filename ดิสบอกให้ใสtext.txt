import datetime
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

select_day = 26
select_month = 9
data_filter = []

#!
data = [
    {
        "minutes": 50,
        "created_date": {
            "$date": "2023-09-26T11:55:54.985Z"
        }
    },
    {
        "minutes": 42,
        "created_date": {
            "$date": "2023-09-26T14:55:54.985Z"
        }
    },
    {
        "minutes": 20,
        "created_date": {
            "$date": "2023-09-26T16:55:54.985Z"
        }
    },
    
    {
        "minutes": 20,
        "created_date": {
            "$date": "2023-09-27T16:55:54.985Z"
        }
    },
]

# Initialize an empty list to store the times
times_list = []
status_list = []
# Loop through the hours from 0 to 23
for hour in range(24):
    # Loop through the minutes from 0 to 50 in 10-minute intervals
    for minute in range(0, 60, 10):
        # Format the hour and minute as a string in "hh:mm" format
        time_str = f"{hour:02d}:{minute:02d}"
        # Append the formatted time to the list
        times_list.append(time_str)

#!
for item in data:
    created_date_str = item["created_date"]["$date"]
    created_date = datetime.datetime.strptime(created_date_str, "%Y-%m-%dT%H:%M:%S.%fZ")
    day = created_date.day
    month = created_date.month
    if day == select_day and month == select_month :
        data_filter.append(item)
    
print(data_filter)

for i in times_list :
    status_list.append(1)

for item in data_filter :
    time_add = item["created_date"]["$date"]
    time_add = datetime.datetime.strptime(time_add, "%Y-%m-%dT%H:%M:%S.%fZ")
    time_hour = time_add.hour
    time_minutes = time_add.minute
    print(time_hour , time_minutes)

    time_hour = time_hour * 6
    time_minutes = int(time_minutes / 10)
    time_down = int(item["minutes"] / 10)

    print("array of time : " , str(time_hour) , "time : " , times_list[time_hour + time_minutes])
    start_time = time_hour + time_minutes
    end_time = start_time + time_down

    for i in range(start_time,end_time + 1) :

            status_list[i] = 0
            print("Time : " , times_list[i] , "Status : " , str( status_list[i]))
    
my_datetime = datetime.datetime.now()
hour = int(my_datetime.strftime("%H"))
minute = int(my_datetime.strftime("%M"))
hour = hour * 6
minute = int(minute / 10)
start_time = time_hour + time_minutes
end_time = len(status_list)
print(start_time)    

for i in range(start_time,end_time) :

    status_list[i] = ""
              
        

x_values = times_list
y_values = status_list

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1("Line Graph Example"),
    
    dcc.Graph(id='line-graph')
])

# Define callback to update the line graph
@app.callback(
    Output('line-graph', 'figure'),
    Input('line-graph', 'relayoutData')  # This is just a placeholder input
)
def update_line_graph(selected_data):
    fig = px.line(x=x_values, y=y_values, title='Line Graph')
    fig.update_yaxes(
        title_text="Status",
        tickvals=[0, 1], 
        ticktext=["Off", "On"]
    )
    
    # Set X-axis label
    fig.update_xaxes(
        title_text="Time"
    )
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)











